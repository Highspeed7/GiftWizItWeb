{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/accounts.service.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/left-ribbon/left-ribbon.component.css","webpack:///./src/app/left-ribbon/left-ribbon.component.html","webpack:///./src/app/left-ribbon/left-ribbon.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\nimport { Http } from '@angular/http';\nimport { Observable } from 'rxjs';\r\n\r\nimport { RegisterModel } from './models/register';\r\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class AccountsService {\n    private url: string = \"api/account/register\";\n\n    constructor(private http: Http) { }\n\n    public registerUser(email: string, password: string, confPass: string): Observable<any> {\n        var registerObj: RegisterModel = {\n            email: email,\r\n            password: password,\r\n            confirmPassword: confPass\r\n        };\n\n        return this.http.post(this.url, registerObj);\n    }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row top-spacer\\\"></div>\\r\\n<!--TODO: Consider placing within own component-->\\r\\n<nav class=\\\"navbar navbar-expand-sm top-nav\\\">\\r\\n    <a class=\\\"navbar-brand\\\">\\r\\n        <div class=\\\"row logo\\\">\\r\\n            <img src=\\\"../../../Content/Images/gw_logo2.png\\\" />\\r\\n        </div>\\r\\n    </a>\\r\\n    <button class=\\\"navbar-toggler\\\" type=\\\"button\\\" data-toggle=\\\"collapse\\\" data-target=\\\"#navbarText\\\" aria-controls=\\\"navbarText\\\" aria-expanded=\\\"false\\\" aria-label=\\\"Toggle navigation\\\">\\r\\n        <span class=\\\"navbar-toggler-icon\\\"></span>\\r\\n    </button>\\r\\n    <div class=\\\"collapse navbar-collapse\\\" id=\\\"navbarText\\\">\\r\\n        <ul class=\\\"navbar-nav mr-auto\\\"></ul>\\r\\n        <div class=\\\"navbar-text\\\">\\r\\n            <ul class=\\\"nav navbar-nav navbar-right\\\">\\r\\n                <li routerLinkActive=\\\"active\\\">\\r\\n                    <a [routerLink]=\\\"['register']\\\">Register</a>\\r\\n                </li>\\r\\n                <li routerLinkActive=\\\"active\\\">\\r\\n                    <a [routerLink]=\\\"['login']\\\">Login</a>\\r\\n                </li>\\r\\n                <!--<li>@Html.ActionLink(\\\"Log in\\\", \\\"Login\\\", \\\"Account\\\", routeValues: null, htmlAttributes: new { id = \\\"loginLink\\\" })</li>-->\\r\\n            </ul>\\r\\n        </div>\\r\\n    </div>\\r\\n</nav>\\r\\n<div class=\\\"row-fluid\\\">\\r\\n    <app-left-ribbon></app-left-ribbon>\\r\\n    <div class=\\\"col-sm-10 main-content\\\">\\r\\n        <router-outlet></router-outlet>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule } from '@angular/router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { LeftRibbonComponent } from './left-ribbon/left-ribbon.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { HttpModule } from '@angular/http';\r\n\r\n// Services\r\nimport { AccountsService } from './accounts.service';\r\nimport { LoginComponent } from './login/login.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        LeftRibbonComponent,\r\n        RegisterComponent,\r\n        LoginComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        HttpModule,\r\n        ReactiveFormsModule,\r\n        RouterModule.forRoot([\r\n            {\r\n                path: \"register\",\r\n                component: RegisterComponent\r\n            },\r\n            {\r\n                path: \"login\",\r\n                component: LoginComponent\r\n            }\r\n        ])\r\n    ],\r\n    providers: [AccountsService],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \"\"","module.exports = \"<div class=\\\"col-sm-2 col-lg-1 ml-5 side-ribbon\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 side-ribbon-content\\\">\\r\\n            Content here!\\r\\n        </div>\\r\\n    </div>\\r\\n</div>    \\r\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-left-ribbon',\n  templateUrl: './left-ribbon.component.html',\n  styleUrls: ['./left-ribbon.component.css']\n})\nexport class LeftRibbonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"alpha-card col-sm-8 mx-auto\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n                <form [formGroup]=\\\"loginForm\\\">\\r\\n                    <div class=\\\"form-group right-vertical-rule\\\">\\r\\n                        <label for=\\\"email\\\">Email: </label>\\r\\n                        <input id=\\\"email\\\" type=\\\"text\\\" class=\\\"form-control\\\" />\\r\\n                    </div>\\r\\n                    <div class=\\\"row\\\">\\r\\n                        <div class=\\\"col-md-12 d-none d-md-block\\\">\\r\\n                            <span class=\\\"or-divider float-right\\\">-OR-</span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"form-group right-vertical-rule\\\">\\r\\n                        <label for=\\\"password\\\">Password: </label>\\r\\n                        <input id=\\\"password\\\" type=\\\"password\\\" value=\\\"\\\" class=\\\"form-control\\\" />\\r\\n                    </div>\\r\\n                    <div class=\\\"btn-group\\\">\\r\\n                        <button class=\\\"btn btn-primary\\\">Submit</button>\\r\\n                    </div>\\r\\n                </form>\\r\\n            </div>\\r\\n            <div class=\\\"col-sm-6\\\">\\r\\n                <h5>Login using the below methods.</h5>\\r\\n                <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-sm-12\\\">\\r\\n                        <button class=\\\"btn btn-primary\\\">Facebook</button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-6 alpha-card mx-auto\\\">\\r\\n        <form [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"onRegisterSubmit()\\\">\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"email\\\">Email: </label>\\r\\n                <input id=\\\"email\\\"\\r\\n                       class=\\\"form-control\\\"\\r\\n                       type=\\\"text\\\"\\r\\n                       name=\\\"email\\\"\\r\\n                       formControlName=\\\"email\\\" />\\r\\n                <div \\r\\n                     class=\\\"alert alert-danger\\\" \\r\\n                     *ngIf=\\\"registerForm.get('email').errors?.required === true \\r\\n                     && registerForm.get('email').touched\\\">Email is required.</div>\\r\\n                <label for=\\\"password\\\">Password: </label>\\r\\n                <input id=\\\"password\\\"\\r\\n                       class=\\\"form-control\\\"\\r\\n                       type=\\\"password\\\"\\r\\n                       name=\\\"password\\\"\\r\\n                       formControlName=\\\"password\\\" />\\r\\n                <div\\r\\n                     class=\\\"alert alert-danger\\\"\\r\\n                     *ngIf=\\\"registerForm.get('password').errors?.required === true &&\\r\\n                     registerForm.get('password').touched\\\">\\r\\n                    Password is required.\\r\\n                </div>\\r\\n                <label for=\\\"confpass\\\">Confirm Password: </label>\\r\\n                <input id=\\\"confpass\\\"\\r\\n                       class=\\\"form-control\\\"\\r\\n                       type=\\\"password\\\"\\r\\n                       name=\\\"confpass\\\"\\r\\n                       formControlName=\\\"confPass\\\" />\\r\\n                <div\\r\\n                     class=\\\"alert alert-danger\\\"\\r\\n                     *ngIf=\\\"registerForm.get('confPass').errors?.required === true &&\\r\\n                     registerForm.get('confPass').touched\\\">\\r\\n                    Confirm Password is required.\\r\\n                </div>\\r\\n            </div>\\r\\n            <button class=\\\"btn btn-primary\\\">Submit</button>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { AccountsService } from \"../accounts.service\";\n\nimport { RegisterModel } from '../models/register';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\n\n@Component({\n    selector: 'app-register',\n    templateUrl: './register.component.html',\n    styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n    public registerForm: FormGroup;\n\n    constructor(private accntSvc: AccountsService) { }\n\n    ngOnInit() {\n        this.registerForm = new FormGroup(\n            {\n                'email': new FormControl('', [Validators.required, Validators.email]),\r\n                'password': new FormControl('', [Validators.required]),\r\n                'confPass': new FormControl('', [Validators.required])\r\n            }\n        );\n    }\n\n    public onUsernameChange(elem: any) {\n        // Check if username available\n        console.log(elem);\r\n    }\n\n    public onRegisterSubmit() {\n        var username = this.registerForm.controls.email.value;\n        var password = this.registerForm.controls.password.value;\n        var confPass = this.registerForm.controls.confpass.value;\n\r\n        this.accntSvc.registerUser(username, password, confPass).subscribe((response) => {\r\n            console.log(response);\r\n        });\r\n    }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}